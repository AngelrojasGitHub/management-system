// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//#region User Models

model Cuenta {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usuario {
  id            String    @id @default(cuid())
  nombre        String?   @map("name")
  email         String?   @unique
  contrasena    String?   @map("password")
  facialID      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rol_nombre    String    @default("Basico")
  accounts      Cuenta[]
  sessions      Session[]
  rol           Rol       @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)

  @@map("User")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Rol {
  id          Int              @id @default(autoincrement())
  rol         String           @unique
  descripcion String
  usuarios    Usuario[]
  permisos    Roles_Permisos[]
}

model Roles_Permisos {
  id          Int      @id @default(autoincrement())
  rol_nombre  String
  permiso_key String
  active      Boolean?
  rol         Rol      @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  permiso     Permiso  @relation(fields: [permiso_key], references: [key], onDelete: Cascade, onUpdate: Cascade)
}

model Permiso {
  id          Int    @id @default(autoincrement())
  permiso     String
  descripcion String

  key   String           @unique
  roles Roles_Permisos[]
}

//#endregion
model Renglon {
  id           Int            @id @default(autoincrement())
  nombre       String         @unique
  descripcion  String
  tipo         String?
  stock_minimo Int            @default(1)
  stock_maximo Int?
  numero_parte String?
  peso         Decimal        @default(1)
  estado       RenglonStates? @default(ACTIVO)

  unidadEmpaqueId Int
  unidad_empaque  UnidadEmpaque @relation(fields: [unidadEmpaqueId], references: [id])
  clasificacionId Int
  clasificacion   Clasificacion @relation(fields: [clasificacionId], references: [id])
  categoriaId     Int
  categoria       Categoria     @relation(fields: [categoriaId], references: [id])

  despachos   Despachos_Renglones[]
  recepciones Recepciones_Renglones[]
}

enum Medidas {
  MILILITROS
  LITROS
  ONZAS
  LIBRAS
  TONELADAS
  KILOGRAMOS
  GRAMOS
  UNIDADES
}

model UnidadEmpaque {
  id           Int       @id @default(autoincrement())
  nombre       String    @unique
  descripcion  String
  abreviacion  String?
  tipo_medida  Medidas
  peso         Decimal?
  renglones    Renglon[]
  categoria    Categoria @relation(fields: [id_categoria], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_categoria Int
}

model Categoria {
  id               Int    @id @default(autoincrement())
  nombre           String @unique
  descripcion      String
  id_clasificacion Int

  renglones        Renglon[]
  unidades_empaque UnidadEmpaque[]
  clasificacion    Clasificacion   @relation(fields: [id_clasificacion], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Clasificacion {
  id          Int         @id @default(autoincrement())
  nombre      String      @unique
  descripcion String
  renglones   Renglon[]
  categorias  Categoria[]
}

model Sistema {
  id          String    @id
  nombre      String
  descripcion String
  existencia  Int
  estado      String
  id_almacen  Int
  almacen     almacenes @relation(fields: [id_almacen], references: [id])
  // despachos_detalles Despachos_Renglones[]

  @@map("Sistemas")
}

model Subsistemas {
  id          String    @id
  nombre      String
  descripcion String
  existencia  Int
  estado      String
  sistema     String
  id_almacen  Int
  almacen     almacenes @relation(fields: [id_almacen], references: [id])
  // despachos_detalles Des[]
  // recibimientos_detalles recibimientos_detalles[]
}

enum RenglonStates {
  ACTIVO        @map("Activo")
  ELIMINADO     @map("Eliminado")
  EN_BORRADOR   @map("En Borrador")
  DESHABILITADO @map("Deshabilitado")
}

model almacenes {
  id          Int           @id
  nombre      String
  ubicacion   String
  Sistemas    Sistema[]
  Subsistemas Subsistemas[]
}

model Recepcion {
  id              Int                     @id @default(autoincrement())
  fecha_recepcion DateTime
  motivo          String?
  renglones       Recepciones_Renglones[]
}

model Recepciones_Renglones {
  id                   Int       @id @default(autoincrement())
  recepcion            Recepcion @relation(fields: [id_recepcion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_recepcion         Int
  renglon              Renglon   @relation(fields: [id_renglon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_renglon           Int
  cantidad             Int
  seriales_automaticos Boolean
  seriales             Serial[]
  fabricante           String?
  precio               Float?
  codigo_solicitud     String?

  fecha_fabricacion DateTime?
  fecha_vencimiento DateTime?
}

model Serial {
  serial       String                @id
  id_recepcion Int
  recepcion    Recepciones_Renglones @relation(fields: [id_recepcion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  estado       String?
  devoluciones Devolucion[]
  id_despacho  Int?
  despacho     Despachos_Renglones?  @relation(fields: [id_despacho], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Devolucion {
  id               Int      @id @default(autoincrement())
  id_serial        String
  serial           Serial   @relation(fields: [id_serial], references: [serial])
  fecha_devolucion DateTime
  motivo           String
}

model Despacho {
  id                  Int                   @id @default(autoincrement())
  fecha_despacho      DateTime
  motivo              String?
  renglones           Despachos_Renglones[]
  cedula_destinatario String?
  destinatario        Destinatario?         @relation(fields: [cedula_destinatario], references: [cedula])
}

model Despachos_Renglones {
  id          Int      @id @default(autoincrement())
  id_renglon  Int
  renglon     Renglon  @relation(fields: [id_renglon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_despacho Int
  despacho    Despacho @relation(fields: [id_despacho], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriales    Serial[]
}

model Destinatario {
  cedula                String             @id
  nombres               String
  telefono              String
  apellidos             String
  situacion_profesional String
  estado                String
  id_unidad             String
  unidad                Unidad_Militar     @relation(fields: [id_unidad], references: [id])
  id_categoria          String
  categoria             Categoria_Militar  @relation(fields: [id_categoria], references: [id])
  id_grado              String
  grado                 Grado_Militar      @relation(fields: [id_grado], references: [id])
  id_componente         String
  componente            Componente_Militar @relation(fields: [id_componente], references: [id])
  despachos             Despacho[]
}

model Componente_Militar {
  id               String             @id
  nombre           String
  descripcion      String
  estado           String
  ultima_edicion   DateTime
  fecha_eliminado  DateTime
  destinatario     Destinatario[]
  personal_militar personal_militar[]
}

model Grado_Militar {
  id               String             @id
  nombre           String
  abreviatura      String
  orden            Int
  estado           String
  ultima_edicion   DateTime
  fecha_eliminado  DateTime
  personal_militar personal_militar[]
  destinatario     Destinatario[]
}

model Categoria_Militar {
  id               String             @id
  nombre           String
  abreviatura      String
  estado           String
  destinatario     Destinatario[]
  personal_militar personal_militar[]
}

model Unidad_Militar {
  id            String             @id
  nombre        String
  descripcion   String
  ubicacion     String
  id_zodi       String
  zodis         zodis              @relation(fields: [id_zodi], references: [id])
  destinatarios Destinatario[]
  personal      personal_militar[]
}

model zodis {
  id          String           @id
  nombre      String
  descripcion String
  ubicacion   String
  id_redi     String
  redi        redis            @relation(fields: [id_redi], references: [id])
  unidad      Unidad_Militar[]
}

model redis {
  id          String  @id
  nombre      String
  descripcion String
  ubicacion   String
  zodis       zodis[]
}

model personal_militar {
  cedula                String              @id
  nombres               String
  apellidos             String
  estado_civil          String
  id_armamento          String
  situacion_profesional String
  estado                String
  id_unidad             String
  id_categoria          String
  id_grado              String
  id_componente         String
  Componente_Militar    Componente_Militar? @relation(fields: [componente_MilitarId], references: [id])
  componente_MilitarId  String?
  Grado_Militar         Grado_Militar?      @relation(fields: [grado_MilitarId], references: [id])
  grado_MilitarId       String?
  Categoria_Militar     Categoria_Militar?  @relation(fields: [categoria_MilitarId], references: [id])
  categoria_MilitarId   String?
  Unidad_Militar        Unidad_Militar?     @relation(fields: [unidad_MilitarId], references: [id])
  unidad_MilitarId      String?
}

model reposos {
  id String @id
}
