// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//#region User Models

model Cuenta {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usuario {
  id            String    @id @default(cuid())
  nombre        String?   @map("name")
  email         String?   @unique
  contrasena    String?   @map("password")
  facialID      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rol_nombre    String    @default("Basico")
  accounts      Cuenta[]
  sessions      Session[]
  rol           Rol       @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)

  @@map("User")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Rol {
  id          Int              @id @default(autoincrement())
  rol         String           @unique
  descripcion String
  usuarios    Usuario[]
  permisos    Roles_Permisos[]
}

model Roles_Permisos {
  id          Int      @id @default(autoincrement())
  rol_nombre  String
  permiso_key String
  active      Boolean?
  rol         Rol      @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  permiso     Permiso  @relation(fields: [permiso_key], references: [key], onDelete: Cascade, onUpdate: Cascade)
}

model Permiso {
  id          Int    @id @default(autoincrement())
  permiso     String
  descripcion String

  key   String           @unique
  roles Roles_Permisos[]
}

//#endregion
model Renglon {
  id           Int                     @id @default(autoincrement())
  nombre       String                  @unique
  descripcion  String
  tipo         String?
  stock_minimo Int                     @default(1)
  stock_maximo Int?
  numero_parte String?
  estado       RenglonStates?          @default(ACTIVO)
  recepciones  Recepciones_Renglones[]

  unidad_empaque  UnidadEmpaque @relation(fields: [unidadEmpaqueId], references: [id])
  clasificacion   Clasificacion @relation(fields: [clasificacionId], references: [id])
  categoria       Categoria     @relation(fields: [categoriaId], references: [id])
  unidadEmpaqueId Int
  clasificacionId Int
  categoriaId     Int

  @@map("Renglones")
}

model UnidadEmpaque {
  id          Int    @id @default(autoincrement())
  nombre      String @unique
  descripcion String

  Renglones Renglon[]
}

model Categoria {
  id          Int    @id @default(autoincrement())
  nombre      String @unique
  descripcion String

  Renglones Renglon[]
}

model Clasificacion {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  descripcion String
  Renglones   Renglon[]
}

model Sistema {
  id                 String               @id
  nombre             String
  descripcion        String
  existencia         Int
  estado             String
  id_almacen         Int
  almacen            almacenes            @relation(fields: [id_almacen], references: [id])
  despachos_detalles despachos_detalles[]

  @@map("Sistemas")
}

model Subsistemas {
  id                 String               @id
  nombre             String
  descripcion        String
  existencia         Int
  estado             String
  sistema            String
  id_almacen         Int
  almacen            almacenes            @relation(fields: [id_almacen], references: [id])
  despachos_detalles despachos_detalles[]
  // recibimientos_detalles recibimientos_detalles[]
}

enum RenglonStates {
  ACTIVO        @map("Activo")
  ELIMINADO     @map("Eliminado")
  EN_BORRADOR   @map("En Borrador")
  DESHABILITADO @map("Deshabilitado")
}

model almacenes {
  id          Int           @id
  nombre      String
  ubicacion   String
  Sistemas    Sistema[]
  Subsistemas Subsistemas[]
}

model despacho {
  id                  String                  @id
  motivo              String
  cedula_destinatario String
  destinatarios       destinatarios_militares @relation(fields: [cedula_destinatario], references: [cedula])
  detalles            despachos_detalles[]

  @@map("despachos")
}

model despachos_detalles {
  id            String       @id
  cantidad      Int
  id_despacho   String
  id_renglon    String
  id_subsistema String
  id_sistema    String
  despachos     despacho     @relation(fields: [id_despacho], references: [id])
  // renglones     renglones   @relation(fields: [id_renglon], references: [id])
  // subsistemas   subsistemas @relation(fields: [id_subsistema], references: [id])
  // sistemas      sistemas    @relation(fields: [id_sistema], references: [id])
  Sistemas      Sistema?     @relation(fields: [sistemasId], references: [id])
  sistemasId    String?
  Subsistemas   Subsistemas? @relation(fields: [subsistemasId], references: [id])
  subsistemasId String?
}

model destinatarios_militares {
  cedula                String                @id
  nombres               String
  apellidos             String
  telefono              String
  correo                String
  cargo                 String
  direccion_domicilio   String
  id_grado              String
  id_categoria          String
  id_componente         String
  id_unidad             String
  despachos             despacho[]
  grados_militares      grados_militares      @relation(fields: [id_grado], references: [id])
  categorias_militares  categorias_militares  @relation(fields: [id_categoria], references: [id])
  componentes_militares componentes_militares @relation(fields: [id_componente], references: [id])
  unidades_militares    unidades_militares    @relation(fields: [id_unidad], references: [id])
}

model Recepcion {
  id              Int                     @id @default(autoincrement())
  fecha_recepcion DateTime
  motivo          String?
  renglones       Recepciones_Renglones[]
}

model Recepciones_Renglones {
  recepcion         Recepcion @relation(fields: [id_recepcion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_recepcion      Int
  renglon           Renglon   @relation(fields: [id_renglon], references: [id])
  id_renglon        Int
  cantidad          Int
  fecha_fabricacion DateTime?
  fecha_vencimiento DateTime?

  @@id([id_recepcion, id_renglon])
}

model devoluciones {
  id              String @id
  id_recibimiento String
  // recibimientos   recibimientos @relation(fields: [id_recibimiento], references: [id])
  // Recepcion   Recibimientos? @relation(fields: [recibimientosId], references: [id])
  recibimientosId Int?
}

model componentes_militares {
  id                      String                    @id
  nombre                  String
  descripcion             String
  estado                  String
  ultima_edicion          DateTime
  fecha_eliminado         DateTime
  destinatarios_militares destinatarios_militares[]
  personal_militar        personal_militar[]
}

model grados_militares {
  id                      String                    @id
  nombre                  String
  abreviatura             String
  orden                   Int
  estado                  String
  ultima_edicion          DateTime
  fecha_eliminado         DateTime
  destinatarios_militares destinatarios_militares[]
  personal_militar        personal_militar[]
}

model categorias_militares {
  id                      String                    @id
  nombre                  String
  abreviatura             String
  estado                  String
  destinatarios_militares destinatarios_militares[]
  personal_militar        personal_militar[]
}

model unidades_militares {
  id                      String                    @id
  nombre                  String
  descripcion             String
  ubicacion               String
  id_zodi                 String
  zodis                   zodis                     @relation(fields: [id_zodi], references: [id])
  destinatarios_militares destinatarios_militares[]
  personal_militar        personal_militar[]
}

model zodis {
  id                 String               @id
  nombre             String
  descripcion        String
  ubicacion          String
  id_redi            String
  unidades_militares unidades_militares[]
  redis              redis                @relation(fields: [id_redi], references: [id])
}

model redis {
  id          String  @id
  nombre      String
  descripcion String
  ubicacion   String
  zodis       zodis[]
}

model personal_militar {
  cedula                String                @id
  nombres               String
  apellidos             String
  estado_civil          String
  id_armamento          String
  situacion_profesional String
  estado                String
  id_unidad             String
  id_categoria          String
  id_grado              String
  id_componente         String
  unidades_militares    unidades_militares    @relation(fields: [id_unidad], references: [id])
  categorias_militares  categorias_militares  @relation(fields: [id_categoria], references: [id])
  grados_militares      grados_militares      @relation(fields: [id_grado], references: [id])
  componentes_militares componentes_militares @relation(fields: [id_componente], references: [id])
}

model reposos {
  id String @id
}
