// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//#region User Models

model Cuenta {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usuario {
  id            String    @id @default(cuid())
  nombre        String
  email         String?   @unique
  contrasena    String?   @map("password")
  facialID      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rol_nombre    String    @default("Basico")
  accounts      Cuenta[]
  sessions      Session[]
  rol           Rol       @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)

  @@map("User")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Rol {
  id          Int              @id @default(autoincrement())
  rol         String           @unique
  descripcion String
  usuarios    Usuario[]
  permisos    Roles_Permisos[]
}

model Roles_Permisos {
  id          Int      @id @default(autoincrement())
  rol_nombre  String
  permiso_key String   @unique
  active      Boolean?
  rol         Rol      @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  permiso     Permiso  @relation(fields: [permiso_key], references: [key], onDelete: Cascade, onUpdate: Cascade)
}

model Permiso {
  id          Int    @id @default(autoincrement())
  permiso     String
  descripcion String

  key   String           @unique
  roles Roles_Permisos[]
}

//#endregion
model Renglon {
  id                   Int            @id @default(autoincrement())
  nombre               String         @unique
  descripcion          String
  tipo                 String?
  stock_minimo         Int            @default(1)
  stock_maximo         Int?
  numero_parte         String?
  peso                 Float          @default(1)
  estado               RenglonStates? @default(ACTIVO)
  fecha_creacion       DateTime       @default(now())
  ultima_actualizacion DateTime       @updatedAt

  unidadEmpaqueId Int
  unidad_empaque  UnidadEmpaque @relation(fields: [unidadEmpaqueId], references: [id])
  clasificacionId Int
  clasificacion   Clasificacion @relation(fields: [clasificacionId], references: [id])
  categoriaId     Int
  categoria       Categoria     @relation(fields: [categoriaId], references: [id])
  id_subsistema   Int?
  subsistema      Subsistema?   @relation(fields: [id_subsistema], references: [id])
  id_almacen      Int?
  almacen         Almacen?      @relation(fields: [id_almacen], references: [id])

  despachos   Despachos_Renglones[]
  recepciones Recepciones_Renglones[]
  seriales    Serial[]
}

enum Medidas {
  MILILITROS
  LITROS
  ONZAS
  LIBRAS
  TONELADAS
  KILOGRAMOS
  GRAMOS
  UNIDADES
}

model UnidadEmpaque {
  id                   Int       @id @default(autoincrement())
  nombre               String    @unique
  descripcion          String
  abreviacion          String?
  tipo_medida          Medidas
  peso                 Float?
  renglones            Renglon[]
  categoria            Categoria @relation(fields: [id_categoria], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_categoria         Int
  fecha_creacion       DateTime  @default(now())
  ultima_actualizacion DateTime  @updatedAt
}

model Categoria {
  id               Int    @id @default(autoincrement())
  nombre           String @unique
  descripcion      String
  id_clasificacion Int

  renglones            Renglon[]
  unidades_empaque     UnidadEmpaque[]
  clasificacion        Clasificacion   @relation(fields: [id_clasificacion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fecha_creacion       DateTime        @default(now())
  ultima_actualizacion DateTime        @updatedAt
}

model Clasificacion {
  id                   Int         @id @default(autoincrement())
  nombre               String      @unique
  descripcion          String
  renglones            Renglon[]
  categorias           Categoria[]
  fecha_creacion       DateTime    @default(now())
  ultima_actualizacion DateTime    @updatedAt
}

model Sistema {
  id          Int          @id @default(autoincrement())
  nombre      String
  descripcion String
  subsistemas Subsistema[]

  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Subsistema {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String
  id_sistema  Int
  sistema     Sistema   @relation(fields: [id_sistema], references: [id], onDelete: Cascade, onUpdate: Cascade)
  renglones   Renglon[]

  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

enum RenglonStates {
  ACTIVO        @map("Activo")
  ELIMINADO     @map("Eliminado")
  EN_BORRADOR   @map("En Borrador")
  DESHABILITADO @map("Deshabilitado")
}

model Almacen {
  id        Int       @id @default(autoincrement())
  nombre    String
  ubicacion String
  renglones Renglon[]

  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Recepcion {
  id                   Int                     @id @default(autoincrement())
  fecha_recepcion      DateTime
  motivo               String?
  renglones            Recepciones_Renglones[]
  fecha_creacion       DateTime                @default(now())
  ultima_actualizacion DateTime                @updatedAt
}

model Recepciones_Renglones {
  id                   Int       @id @default(autoincrement())
  recepcion            Recepcion @relation(fields: [id_recepcion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_recepcion         Int
  renglon              Renglon   @relation(fields: [id_renglon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_renglon           Int
  cantidad             Int
  seriales_automaticos Boolean
  seriales             Serial[]
  fabricante           String?
  precio               Float?
  codigo_solicitud     String?
  fecha_creacion       DateTime  @default(now())
  ultima_actualizacion DateTime  @updatedAt
  fecha_fabricacion    DateTime?
  fecha_vencimiento    DateTime?
}

model Serial {
  id                   Int                   @id @default(autoincrement())
  serial               String                @unique
  id_renglon           Int
  renglon              Renglon               @relation(fields: [id_renglon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_recepcion         Int
  recepcion            Recepciones_Renglones @relation(fields: [id_recepcion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  estado               String?               @default("Disponible")
  devoluciones         Devolucion[]
  id_despacho          Int?
  despacho             Despachos_Renglones?  @relation(fields: [id_despacho], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fecha_creacion       DateTime              @default(now())
  ultima_actualizacion DateTime              @updatedAt
}

model Devolucion {
  id                   Int      @id @default(autoincrement())
  id_serial            Int
  serial               Serial   @relation(fields: [id_serial], references: [id])
  fecha_devolucion     DateTime
  motivo               String
  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Despacho {
  id                  Int                   @id @default(autoincrement())
  fecha_despacho      DateTime
  motivo              String?
  renglones           Despachos_Renglones[]
  cedula_destinatario String
  cedula_autorizador  String?
  cedula_abastecedor  String?
  cedula_supervisor   String?

  destinatario Destinatario                @relation(fields: [cedula_destinatario], references: [cedula], onDelete: Cascade, onUpdate: Cascade)
  autorizador  Profesional_Abastecimiento? @relation(name: "autorizador", fields: [cedula_autorizador], references: [cedula], onDelete: Cascade, onUpdate: Cascade)
  abastecedor  Profesional_Abastecimiento? @relation(name: "abastecedor", fields: [cedula_abastecedor], references: [cedula], onDelete: Cascade, onUpdate: Cascade)
  supervisor   Profesional_Abastecimiento? @relation(name: "supervisor", fields: [cedula_supervisor], references: [cedula], onDelete: Cascade, onUpdate: Cascade)

  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Despachos_Renglones {
  id                   Int      @id @default(autoincrement())
  id_renglon           Int
  renglon              Renglon  @relation(fields: [id_renglon], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_despacho          Int
  despacho             Despacho @relation(fields: [id_despacho], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriales             Serial[]
  manualSelection      Boolean
  cantidad             Int
  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

enum Tipos_Cedulas {
  V
  E
  J
  G
  R
  P
}

enum Tipos_Destinatarios {
  Civil
  Militar
}

enum Generos {
  Femenino
  Masculino
}

model Destinatario {
  id                Int                 @id @default(autoincrement())
  tipo_cedula       Tipos_Cedulas
  cedula            String              @unique
  nombres           String
  apellidos         String
  telefono          String
  cargo_profesional String?
  direccion         String
  tipo              Tipos_Destinatarios
  sexo              Generos

  id_unidad     Int?
  unidad        Unidad_Militar?     @relation(fields: [id_unidad], references: [id])
  id_categoria  Int?
  categoria     Categoria_Militar?  @relation(fields: [id_categoria], references: [id])
  id_grado      Int?
  grado         Grado_Militar?      @relation(fields: [id_grado], references: [id])
  id_componente Int?
  componente    Componente_Militar? @relation(fields: [id_componente], references: [id])

  despachos Despacho[]

  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Profesional_Abastecimiento {
  id                Int           @id @default(autoincrement())
  tipo_cedula       Tipos_Cedulas
  cedula            String        @unique
  nombres           String
  apellidos         String
  telefono          String
  cargo_profesional String?
  direccion         String
  sexo              Generos

  id_unidad     Int?
  unidad        Unidad_Militar?    @relation(fields: [id_unidad], references: [id])
  id_categoria  Int
  categoria     Categoria_Militar  @relation(fields: [id_categoria], references: [id])
  id_grado      Int
  grado         Grado_Militar      @relation(fields: [id_grado], references: [id])
  id_componente Int
  componente    Componente_Militar @relation(fields: [id_componente], references: [id])

  fecha_creacion       DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt

  abastecedor Despacho[] @relation("abastecedor")
  autorizador Despacho[] @relation("autorizador")
  supervisor  Despacho[] @relation("supervisor")
}

// model Profesionales_Despacho {
//   id                   Int                        @id @default(autoincrement())
//   id_profesional       Int
//   profesional          Profesional_Abastecimiento @relation(fields: [id_profesional], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   id_despacho          Int
//   despacho             Despacho                   @relation(fields: [id_despacho], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   fecha_creacion       DateTime                   @default(now())
//   ultima_actualizacion DateTime                   @updatedAt
// }

model Componente_Militar {
  id                   Int                          @id @default(autoincrement())
  nombre               String                       @unique
  descripcion          String
  estado               String?
  // ultima_edicion   DateTime
  // fecha_eliminado  DateTime
  destinatario         Destinatario[]
  personal_militar     personal_militar[]
  grados               Grados_Componentes[]
  fecha_creacion       DateTime                     @default(now())
  ultima_actualizacion DateTime                     @updatedAt
  profesionales        Profesional_Abastecimiento[]
}

model Grados_Componentes {
  id                   Int                @id @default(autoincrement())
  id_grado             Int
  grado                Grado_Militar      @relation(fields: [id_grado], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_componente        Int
  componente           Componente_Militar @relation(fields: [id_componente], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fecha_creacion       DateTime           @default(now())
  ultima_actualizacion DateTime           @updatedAt
}

model Grado_Militar {
  id          Int     @id @default(autoincrement())
  nombre      String  @unique
  abreviatura String
  orden       Int?
  estado      String?

  // ultima_edicion   DateTime
  // fecha_eliminado  DateTime
  componentes          Grados_Componentes[]
  categorias           Categorias_Grados[]
  personal_militar     personal_militar[]
  destinatario         Destinatario[]
  fecha_creacion       DateTime                     @default(now())
  ultima_actualizacion DateTime                     @updatedAt
  profesionales        Profesional_Abastecimiento[]
}

model Categorias_Grados {
  id                   Int               @id @default(autoincrement())
  id_categoria         Int
  categoria            Categoria_Militar @relation(fields: [id_categoria], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fecha_creacion       DateTime          @default(now())
  ultima_actualizacion DateTime          @updatedAt
  id_grado             Int
  grado                Grado_Militar     @relation(fields: [id_grado], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Categoria_Militar {
  id                   Int                          @id @default(autoincrement())
  nombre               String                       @unique
  abreviatura          String
  estado               String?
  destinatario         Destinatario[]
  personal_militar     personal_militar[]
  grados               Categorias_Grados[]
  fecha_creacion       DateTime                     @default(now())
  ultima_actualizacion DateTime                     @updatedAt
  profesionales        Profesional_Abastecimiento[]
}

model Unidad_Militar {
  id                   Int                          @id @default(autoincrement())
  nombre               String                       @unique
  descripcion          String
  ubicacion            String
  id_zodi              Int
  zodi                 Zodi                         @relation(fields: [id_zodi], references: [id])
  destinatarios        Destinatario[]
  personal             personal_militar[]
  fecha_creacion       DateTime                     @default(now())
  ultima_actualizacion DateTime                     @updatedAt
  profesionales        Profesional_Abastecimiento[]
}

model Zodi {
  id          Int              @id @default(autoincrement())
  nombre      String           @unique
  descripcion String
  ubicacion   String
  id_redi     Int
  redi        Redi             @relation(fields: [id_redi], references: [id])
  unidades    Unidad_Militar[]
}

model Redi {
  id          Int    @id @default(autoincrement())
  nombre      String @unique
  descripcion String
  ubicacion   String
  zodis       Zodi[]
}

model personal_militar {
  cedula                String              @id
  nombres               String
  apellidos             String
  estado_civil          String
  id_armamento          String
  situacion_profesional String
  estado                String
  id_unidad             String
  id_categoria          String
  id_grado              String
  id_componente         String
  Componente_Militar    Componente_Militar? @relation(fields: [componente_MilitarId], references: [id])
  componente_MilitarId  Int?
  Grado_Militar         Grado_Militar?      @relation(fields: [grado_MilitarId], references: [id])
  grado_MilitarId       Int?
  Categoria_Militar     Categoria_Militar?  @relation(fields: [categoria_MilitarId], references: [id])
  categoria_MilitarId   Int?
  Unidad_Militar        Unidad_Militar?     @relation(fields: [unidad_MilitarId], references: [id])
  unidad_MilitarId      Int?
}

model reposos {
  id String @id
}
